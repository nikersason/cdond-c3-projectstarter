version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      id:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-<< parameters.id >> --recursive
            aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.id>>
            aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.id>>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      id:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}    
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl -H "token: ${MEMSTACHE_TOKEN}" --request GET https://api.memstash.io/values/migration_<< parameters.id >>)
            if (( $SUCCESS == 1 ));
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi  

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run: 
          name: frontend test
          command: |
            cd frontend
            npm install
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run: 
          name: backend test
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run: 
          name: frontend scan
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            # If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run: 
          name: backend scan
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            # If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
       - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            	aws ec2 describe-instances \
              \
                      --query 'Reservations[*].Instances[*].PublicIpAddress'\
                    --filters "Name=tag:project,Values=udapeople"\
                    --output text >> .circleci/ansible/inventory.txt
      - run: cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}  

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run: apk add --update tar 
      - run: apk add --update gzip 
      - run: pip install awscli
      - run: aws --version
      - add_ssh_keys:
            fingerprints:
              - "ac:38:4a:fa:83:90:fb:f2:49:9b:7d:05:25:58:9b:bb"
      - attach_workspace:
            at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      # - destroy-environment:
      #     id: ${CIRCLE_WORKFLOW_ID:0:7} 

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
             cd backend
             npm install
             # Run and save the migration output
             npm run migrations > migrations_dump.txt
      - run: cat ~/project/backend/migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl -H "Content-Type: text/plain" -H "token: ${MEMSTACHE_TOKEN}" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
            fi
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build 

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout 
      - run: yum install -y tar gzip curl
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            yum update -y
            yum install -y python3
      - run: pip3 install ansible
      - run: |
              curl -sL https://rpm.nodesource.com/setup_14.x | bash -
              yum install -y nodejs
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
                                --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}"\
                                          "Name=instance-state-name,Values=running" \
                                --query 'Reservations[*].Instances[*].{Instance:PublicIpAddress}' --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # - destroy-environment:
      #     id: ${CIRCLE_WORKFLOW_ID:0:7} 
      # - revert-migrations:
      #     id: ${CIRCLE_WORKFLOW_ID:0:7}    
                    
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
            fingerprints:
              - "ac:38:4a:fa:83:90:fb:f2:49:9b:7d:05:25:58:9b:bb"
      - run: apk add --update tar 
      - run: apk add --update gzip 
      - run: pip install awscli    #for destroy environment &  delete-bucket
      - run: apk add --update curl #for revert migrations
      - attach_workspace:
            at: ~/
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install dependencies
          command: |
            echo 'installing ansible'
            apk add --update ansible
            echo 'installing nodejs & npm'
            apk add nodejs-current
            apk add npm
            node --version
            npm --version

      - run:
          name: Deploy backend
          command: |
            cd backend
            echo ENVIROMENT=development > ".env"
            echo TYPEORM_CONNECTION=postgres >> ".env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> ".env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> ".env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> ".env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"
            echo 'begin npm install -------'
            npm install
            echo 'begin npm run build ------'
            npm run build
            cd ..
            # Zip the directory
            echo 'begin tar -----------'
            tar -C backend -czf artifact.tar.gz .
            mv artifact.tar.gz ~/project/.circleci/ansible/roles/deploy/files/
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      # - destroy-environment:
      #     id: ${CIRCLE_WORKFLOW_ID:0:7}
      # - revert-migrations:
      #     id: ${CIRCLE_WORKFLOW_ID:0:7}

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11 
    steps:
      - checkout
      - run: pip install awscli    #for destroy environment &  delete-bucket
      - run: apk add --update curl #for revert migrations
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
                      --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}"\
                                "Name=instance-state-name,Values=running" \
                      --query 'Reservations[*].Instances[*].{Instance:PublicIpAddress}' --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                return 0
            else
                return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
                # Change this to 0 after the job fails
              return 0
            else
              return 1
            fi
      # - destroy-environment:
      #     id: ${CIRCLE_WORKFLOW_ID:0:7}
      # - revert-migrations:
      #     id: ${CIRCLE_WORKFLOW_ID:0:7}

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name InitialStack \
              --parameter-overrides WorkflowID=${CIRCLE_WORKFLOW_ID:0:7} \
              --tags project=udapeople

  cleanup:
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - run:
            name: Cleanup old files and stacks
            command: |
              export currentWorkflowID=$(aws cloudformation \
                    list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                    --no-paginate --output text)
              echo CurrentWorkflowID: "${currentWorkflowID}"
              export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                    --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
              echo Stack names: "${STACKS[@]}" 
              for i in "${STACKS[@]}"; do
                    if [[ "${i}" != *"${currentWorkflowID}"* && "${i}" != "InitialStack"  ]]
                    then
                    echo "deleting ${i}" 
                    aws s3 rm "s3://udapeople-$(echo ${i} | cut -d'-' -f 3)" --recursive
                    aws cloudformation delete-stack --stack-name "${i}"
                    fi
              done

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
